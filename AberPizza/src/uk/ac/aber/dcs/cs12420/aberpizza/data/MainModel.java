package uk.ac.aber.dcs.cs12420.aberpizza.data;


import java.awt.Dimension;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.*;
import uk.ac.aber.dcs.cs12420.aberpizza.gui.*;

/**
 * This class is "a heart" of the application. It performs most of operations.
 * @author Stanislaw Klimaszewski
 */
public class MainModel {
	private MainWindow mw;
	private Till till;
	private Order currentOrder;
	private Settings settings;
	
	/**
	 * Initialise Order and Settings classes.
	 * @param mw object of MainWindow class
	 */
	public MainModel(MainWindow mw){
		this.mw = mw;
		this.till = new Till();
		this.currentOrder = new Order();
		this.settings = Settings.load();
	}
	
	/**
	 * Adds new item to the current order
	 * @param foodType type of food, we want to add
	 */
	public void addNewItem(FoodType foodType){
		// -- Ask for item --
		MyDialog dialog = new MyDialog(mw, "Choose "+foodType, settings.getAvailableItems(foodType));
		String name = dialog.getRespond();
		if(name.equals("")){
			return;
		}
		// -- Ask for size --
		PizzaSize pizzaSize = null;
		if(foodType.equals(FoodType.PIZZA)){
			String[] sizes = { "Small", "Medium", "Large" };
			dialog = new MyDialog(mw, "Choose Size", sizes);
			String size = dialog.getRespond();
			if(size.equals("")){
				return;
			}
			pizzaSize = PizzaSize.valueOf(size.toUpperCase());
		}

		// -- Ask for quantity --
		MyNumPad pad = new MyNumPad(mw, "How many?");
		int quantity = pad.getNumber();
		if(quantity == 0){
			return;
		}
		// -- Add new item --
		switch(foodType){
		case PIZZA:
			Item item = settings.getItem(name, foodType);
			Pizza pizza = new Pizza((Pizza)item);
			pizza.setSize(pizzaSize);
			currentOrder.addItem(pizza, quantity);
			break;
		default:
			Item otherItem = settings.getItem(name, foodType);
			currentOrder.addItem(otherItem, quantity);
			break;
		}
		mw.setOrderList(currentOrder.getOrderList());
		this.countDiscount();
		mw.setNewValues(currentOrder.getDiscount(), currentOrder.getSubTotal());
	}
	
	/**
	 * Asks for customer name and print a recipt.
	 */
	public void processOrder(){
		MyKeyboard keyboard = new MyKeyboard(mw, "Enter customer name");
		String customerName = keyboard.getString();
		if(customerName.length() > 0){
			currentOrder.setCustomerName(customerName);
			currentOrder.setDate(new Date());
			till.addOrder(currentOrder);
			JDialog dialog = new JDialog(mw, "Recipt", true);
			JEditorPane display = new JEditorPane();
			display.setContentType("text/html");
			display.setEditable(false);
			String text = "<div style='font-family:\"Courier New\", Courier, monospace;letter-spacing:-1px;width:200px;'> <div style=\"text-align:center;\"> <h3 style=\"margin:2px;\">"+settings.getRestaurantName().toUpperCase()+"</h3><h4 style=\"margin:2px;\">TEL. "+settings.getRestaurantTel()+"</h4> **************************************<br /> PLEASE GIVE US YOUR FEEDBACK<br /> **************************************<br /> Recipt generated by<br />AberPizza software<br /> --------------------------------------<br /></div>";
			text += currentOrder.getReceipt();
			text += "<div style=\"text-align:center;\">--------------------------------------<br /> Thanks for your order! </div>  </div>";
			display.setText(text);
			Dimension dim = display.getPreferredSize();
			dialog.setContentPane(display);
			dialog.setSize((int)dim.getWidth()+5, (int)dim.getHeight()+30);
			dialog.setLocationRelativeTo(mw);
			dialog.setResizable(false);
			dialog.setVisible(true);
			this.currentOrder = new Order();
			mw.setOrderList(currentOrder.getOrderList());
			this.countDiscount();
			mw.setNewValues(currentOrder.getDiscount(), currentOrder.getSubTotal());
		}
	}
	
	/**
	 * Make new order, clear order list and update discount and subtotal values
	 */
	public void newOrder(){
		this.currentOrder = new Order();
		mw.setOrderList(currentOrder.getOrderList());
		mw.setNewValues(currentOrder.getDiscount(), currentOrder.getSubTotal());
	}
	
	/**
	 * Modify current selected item from order list.
	 */
	public void modifySelectedItem(){
		int selected = mw.getSelected();
		if(selected >= 0){
			MyNumPad pad = new MyNumPad(mw, "Change quantity");
			int quantity = pad.getNumber();
			if(quantity == 0){
				currentOrder.deleteItem(selected);
			}else{
				currentOrder.updateItemQuantity(selected, quantity);
			}
			mw.setOrderList(currentOrder.getOrderList());
			this.countDiscount();
			mw.setNewValues(currentOrder.getDiscount(), currentOrder.getSubTotal());
		}
	}
	
	/**
	 * Deletes current selected item from order list.
	 */
	public void deleteSelectedItem(){
		int selected = mw.getSelected();
		if(selected >= 0){
			currentOrder.deleteItem(selected);
			mw.setOrderList(currentOrder.getOrderList());
			this.countDiscount();
			mw.setNewValues(currentOrder.getDiscount(), currentOrder.getSubTotal());
		}
	}
	
	/**
	 * Loads till, set most of the buttons enabled.
	 */
	public void startTill(){
		this.till = Till.load();
		mw.startTill();
	}
	
	/**
	 * Save current till state, clear current order list, set most of the buttons disabled.
	 */
	public void closeTill(){
		this.newOrder();
		till.save();
		mw.closeTill();
	}
	
	/**
	 * Show window with preferences, save settings after closing.
	 */
	public void showPreferences(){
		new PreferencesWindow(mw, settings);
		settings.save();
	}
	
	/**
	 * Choose the best discount from available discounts.
	 */
	private void countDiscount(){
		ArrayList<Discount> discounts = settings.getDiscounts();
		BigDecimal bestDiscount = new BigDecimal("0");
		for(Discount discount: discounts){
			if(bestDiscount.compareTo(discount.getDiscount(currentOrder.getOrderItems())) == -1){
				bestDiscount = discount.getDiscount(currentOrder.getOrderItems());
			}
		}
		currentOrder.setDiscount(bestDiscount);
	}
	
	/**
	 * @return object of Till class
	 */
	public Till getTill(){
		return this.till;
	}
}
